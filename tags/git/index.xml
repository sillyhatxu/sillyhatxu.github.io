<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Sillyhat Blog</title>
    <link>http://sillyhatxu.com/tags/git/</link>
    <description>Recent content in Git on Sillyhat Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 May 2019 23:13:11 +0800</lastBuildDate>
    
	<atom:link href="http://sillyhatxu.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git Tips</title>
      <link>http://sillyhatxu.com/tools/git/git-tips/</link>
      <pubDate>Tue, 14 May 2019 23:13:11 +0800</pubDate>
      
      <guid>http://sillyhatxu.com/tools/git/git-tips/</guid>
      <description>Git的奇技淫巧:see_no_evil:  Git常用命令集合，Fork于tips项目
 Git是一个 “分布式版本管理工具”，简单的理解版本管理工具：大家在写东西的时候都用过 “回撤” 这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用 “回撤” 是找不回来的。而 “版本管理工具” 能记录每次的修改，只要提交到版本仓库，你就可以找到之前任何时刻的状态（文本状态）。
下面的内容就是列举了常用的 Git 命令和一些小技巧，可以通过 &amp;ldquo;页面内查找&amp;rdquo; 的方式进行快速查询：Ctrl/Command+f。
开卷必读 如果之前未使用过 Git，可以学习 Git 小白教程入门
 一定要先测试命令的效果后，再用于工作环境中，以防造成不能弥补的后果！到时候别拿着砍刀来找我 所有的命令都在git version 2.7.4 (Apple Git-66)下测试通过 统一概念：  工作区：改动（增删文件和内容） 暂存区：输入命令：git add 改动的文件名，此次改动就放到了 ‘暂存区’ 本地仓库(简称：本地)：输入命令：git commit 此次修改的描述，此次改动就放到了 ’本地仓库’，每个 commit，我叫它为一个 ‘版本’。 远程仓库(简称：远程)：输入命令：git push 远程仓库，此次改动就放到了 ‘远程仓库’（GitHub 等) commit-id：输出命令：git log，最上面那行 commit xxxxxx，后面的字符串就是 commit-id  如果喜欢这个项目，欢迎 Star、提交 Pr、反馈问题😊  目录  展示帮助信息 回到远程仓库的状态 重设第一个commit 展示工作区和暂存区的不同 展示暂存区和最近版本的不同 展示暂存区、工作区和最近版本的不同 快速切换到上一个分支 删除已经合并到 master 的分支 展示本地分支关联远程仓库的情况 关联远程分支 列出所有远程分支 列出本地和远程分支 查看远程分支和本地分支的对应关系 远程删除了分支本地也想删除 创建并切换到本地分支 从远程分支中创建并切换到本地分支 删除本地分支 删除远程分支 重命名本地分支 查看标签 查看标签详细信息 本地创建标签 推送标签到远程仓库 删除本地标签 删除远程标签 切回到某个标签 放弃工作区的修改 恢复删除的文件 以新增一个 commit 的方式还原某一个 commit 的修改 回到某个 commit 的状态，并删除后面的 commit 修改上一个 commit 的描述 查看 commit 历史 显示本地更新过 HEAD 的 git 命令记录 修改作者名 修改远程仓库的 url 增加远程仓库 列出所有远程仓库 查看两个星期内的改动 把 A 分支的某一个 commit，放到 B 分支上 给 git 命令起别名 存储当前的修改，但不用提交 commit 保存当前状态，包括 untracked 的文件 展示所有 stashes 回到某个 stash 的状态 回到最后一个 stash 的状态，并删除这个 stash 删除所有的 stash 从 stash 中拿出某个文件的修改 展示所有 tracked 的文件 展示所有 untracked 的文件 展示所有忽略的文件 强制删除 untracked 的文件 强制删除 untracked 的目录 展示简化的 commit 历史 查看某段代码是谁写的 把某一个分支到导出成一个文件 从包中导入分支 执行 rebase 之前自动 stash 从远程仓库根据 ID，拉下某一状态，到本地分支 详细展示一行中的修改 清除 .</description>
    </item>
    
    <item>
      <title>Run Docker Image From Gitlab</title>
      <link>http://sillyhatxu.com/2018/04/run-docker-image-from-gitlab/</link>
      <pubDate>Thu, 26 Apr 2018 15:12:29 +0800</pubDate>
      
      <guid>http://sillyhatxu.com/2018/04/run-docker-image-from-gitlab/</guid>
      <description>docker run
sudo docker run --detach \ --hostname gitlab.xushikuan.com \ --publish 443:443 --publish 80:80 --publish 2222:22 \ --name gitlab \ --restart always \ --env GITLAB_OMNIBUS_CONFIG=&amp;quot;gitlab_rails[&#39;backup_keep_time&#39;] = 60;gitlab_rails[&#39;manage_backup_path&#39;] = true;gitlab_rails[&#39;backup_path&#39;] = &#39;/var/opt/gitlab/backups&#39;&amp;quot; \ --volume /home/ubuntu/gitlab/config:/etc/gitlab \ --volume /home/ubuntu/gitlab/logs:/var/log/gitlab \ --volume /home/ubuntu/gitlab/data:/var/opt/gitlab \ gitlab/gitlab-ce:11.3.0-rc6.ce.0  </description>
    </item>
    
    <item>
      <title>Git Operator Record</title>
      <link>http://sillyhatxu.com/tools/git/git-operator-record/</link>
      <pubDate>Thu, 26 Apr 2018 15:08:23 +0800</pubDate>
      
      <guid>http://sillyhatxu.com/tools/git/git-operator-record/</guid>
      <description>暂时储藏 git stash 从储藏中取出（默认取出最后一个） git stash apply 清空 git stash clear 查看stash列表 git stash list 指定要取出的储藏代码 git stash apply stash@{1}
强制还原c git reset &amp;ndash;hard</description>
    </item>
    
  </channel>
</rss>